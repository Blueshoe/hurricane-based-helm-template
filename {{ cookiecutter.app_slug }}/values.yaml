{% macro random_char(len) -%}
  {% for n in range(len) %}
    {{- cookiecutter.__alphabet|random -}}
  {% endfor %}
{%- endmacro -%}

{% macro gen_secret(group_len=6) -%}
  {% set parts %}
      {{- random_char(group_len) -}}
  {% endset %}
  {{- parts|join("") -}}
{%- endmacro -%}

# Default values for {{ cookiecutter.app_slug }}.
# All values default to development scenarios. They are to be overwritten for production-close environments.
# These variables are shared across all environments

replicaCount: 1

image:
  repository: {{ cookiecutter.image_repo }}
  tag: latest
  pullPolicy: Always

{% if cookiecutter.use_celery_worker == "yes" or cookiecutter.use_celery_beat == "yes" -%}
amqpConnect:
  repository: {{ cookiecutter.ampq_connect_image_repo }}
  tag: master
  pullPolicy: Always
{% endif -%}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000

{%- set containerPortNumber = range(8000, 8500) | random %}
{%- set oauth2ContainerPortNumber = range(8501, 9000) | random %}
{%- set containerProbePortNumber = range(9001, 9500) | random %}

containerPort:
  name: http
  portNumber: {{ containerPortNumber}}

containerProbePort: {{ containerProbePortNumber }}

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true

volumePermissions:
  enabled: true

service:
  type: ClusterIP
  port:
    portNumber: 8080
    name: http

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

#
# Values for development environments
#

global:
  environment: "development"
  postgresql:
    postgresqlUsername: {{ cookiecutter.app_slug }}_dev
    existingSecret: {{ cookiecutter.app_slug }}-django-secrets

environmentVariables:
  DJANGO_DEBUG: True
  DJANGO_ALLOWED_HOSTS: '*'

serveStatic: true
serveMedia: false

assets:
  assetsMountPath: "/var/django"
  mediaPathPrefix: "/media/"
  staticPathPrefix: "/static/"

deploymentAnnotations: {}
deploymentLabels: {}

{% if cookiecutter.use_oauth2_proxy == "yes" -%}
oauth2proxy:
  image:
    repository: quay.io/oauth2-proxy/oauth2-proxy
    tag: v7.0.1
    pullPolicy: Always
  containerPort: {{ oauth2ContainerPortNumber }}
  settings:
    client_id: my-client
    client_secret: my-secret
    # docker run -ti --rm python:3-alpine python -c 'import secrets,base64; print(base64.b64encode(base64.b64encode(secrets.token_bytes(16))));'
    cookie_secret: "rXPajRXVoIINCXz/xJIC1w=="
    provider: oidc
    email_domain: "*"
    scope: openid
    upstream: http://127.0.0.1:{{ containerPortNumber }}
    http_address: 0.0.0.0:{{ oauth2ContainerPortNumber }}
    proxy_prefix: /oauth2
    login_url: http://keycloak.127.0.0.1.nip.io:61346/auth/realms/master/protocol/openid-connect/auth
    redeem_url: http://keycloak-http/auth/realms/master/protocol/openid-connect/token
    validate_url: http://keycloak-http/auth/realms/master/protocol/openid-connect/userinfo
    redirect_url: http://app.127.0.0.1.nip.io:61346/content/oauth2/callback
    skip_auth_preflight: true
    skip_jwt_bearer_tokens: true
    skip_auth_route: "GET: /schema.json"
    cookie_httponly: true
    cookie_secure: false
    cookie_samesite: lax
    cookie_domain: "*"
    cookie_refresh: 1m
    standard_logging: true
    auth_logging: true
    request_logging: true
    pass_access_token: true
    oidc_issuer_url: http://keycloak.127.0.0.1.nip.io:61346/auth/realms/master
    oidc_jwks_url: http://keycloak-http/auth/realms/master/protocol/openid-connect/certs
    skip_oidc_discovery: true
{% endif -%}

ingress:
  enabled: true
  enableLetsencrypt: false
  annotations: []
  hosts:
    {{ cookiecutter.app_slug }}.dev.127.0.0.1.nip.io:
      path: /
      serviceName: {{ cookiecutter.app_slug }}
      servicePort: 8080
  tls: []

{% if cookiecutter.use_rabbitmq == "yes" -%}
rabbitmq:
  enabled: true
  volumePermissions:
    enabled: true
  auth:
    username: {{ cookiecutter.app_slug }}
    existingPasswordSecret: {{ cookiecutter.app_slug }}-rabbitmq-custom
    existingErlangSecret: {{ cookiecutter.app_slug }}-rabbitmq-custom
  vhost: /
  password: {{ gen_secret(32) }}
  erlangSecret: {{ gen_secret(32) }}
{% endif -%}

{% set image_parts = cookiecutter.image_repo.split("/") -%}
{% if cookiecutter.use_imagePullSecret == "yes" -%}
imageCredentials:
  registry: {{ image_parts.0 }}
  username: {{ cookiecutter.registry_username }}
  password: {{ cookiecutter.registry_password }}
{% endif -%}

#
# These variables generate a Kubernetes Secret with the following variables added to the containers ENV.
# If you add variables here, please add the mapping in _env.tpl, too
#
secretEnvironmentVariables:
    DJANGO_SECRET_KEY: {{ gen_secret(85) }}

postgresql:
    enabled: true
    postgresqlDatabase: {{ cookiecutter.app_slug }}
    postgresqlPassword: {{ gen_secret(6) }}
    volumePermissions:
      enabled: true
